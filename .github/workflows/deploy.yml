name: Production ECS Deployment (Split)

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'infra/**'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  TF_WORKING_DIR: infra

jobs:
  # ------------------------------------------------------------------
  # 1. INFRASTRUCTURE JOB (No Changes)
  # ------------------------------------------------------------------
  infra_apply:
    name: 🏗️ Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for infra changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infra/**'
              
      - name: Skip if no infra changes
        if: steps.filter.outputs.infra != 'true'
        run: echo "No changes detected in infra/, skipping terraform apply."
        
      - name: Configure AWS Credentials
        if: steps.filter.outputs.infra == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        if: steps.filter.outputs.infra == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
          
      - name: Terraform Init, Format, Plan, and Apply
        if: steps.filter.outputs.infra == 'true'
        run: |
          terraform init
          terraform fmt -check -recursive
          terraform validate
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}



  # ------------------------------------------------------------------
  # 2. APPLICATION JOB (FINAL FIX: Use a Temporary File Path)
  # ------------------------------------------------------------------
  app_deploy:
    name: 🚀 Build and Deploy App
    runs-on: ubuntu-latest
    environment: production
    
    needs: [infra_apply] 
    if: success() || always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials (for deployment)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (to read outputs)
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
          
      # Retrieve Outputs (Reads from S3 state and sets ENV vars)
      - name: Retrieve Infra Outputs from Remote State
        run: |
          terraform init
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "ECS_TASK_EXECUTION_ROLE_ARN=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG ./app
          docker push $ECR_REGISTRY:$IMAGE_TAG

      # 💥 FINAL SOLUTION STEP: Inject Variables and Write to Temporary File
      - name: Inject Variables and Write Task Definition JSON
        id: prepare_task_def_file
        run: |
          TASK_DEF_FILE="${{ env.TF_WORKING_DIR }}/task-definition-template.json"
          TEMP_JSON_PATH="task-definition-${{ github.sha }}.json" # Unique temporary file name
          
          # Use jq to inject variables and write the result to a clean file
          jq --arg arn "${{ env.ECS_TASK_EXECUTION_ROLE_ARN }}" \
             --arg image "${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}" \
             '.executionRoleArn = $arn | .containerDefinitions[0].image = $image' \
             "$TASK_DEF_FILE" > "$TEMP_JSON_PATH"
          
          # Export the path of the clean file
          echo "::set-output name=final_td_path::$TEMP_JSON_PATH"
        working-directory: ${{ github.workspace }} # Run from workspace root

      # Deploy to ECS via CodeDeploy
      - name: Deploy to ECS via CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          # 💥 FIX: Pass the guaranteed local file path
          task-definition: ${{ steps.prepare_task_def_file.outputs.final_td_path }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          
          # Additional inputs required for CodeDeploy support
          codedeploy-appspec: app/appspec.yaml
          codedeploy-application: ${{ env.PROJECT_NAME }}-codedeploy-app
          codedeploy-deployment-group: ${{ env.PROJECT_NAME }}-dg
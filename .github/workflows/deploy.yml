name: Production ECS Deployment (Split)

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'infra/**'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  TF_WORKING_DIR: infra

jobs:
  # ------------------------------------------------------------------
  # 1. INFRASTRUCTURE JOB (Unchanged)
  # ------------------------------------------------------------------
  infra_apply:
    name: 🏗️ Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for infra changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infra/**'
              
      - name: Skip if no infra changes
        if: steps.filter.outputs.infra != 'true'
        run: echo "No changes detected in infra/, skipping terraform apply."
        
      - name: Configure AWS Credentials
        if: steps.filter.outputs.infra == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        if: steps.filter.outputs.infra == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
          
      - name: Terraform Init, Format, Plan, and Apply
        if: steps.filter.outputs.infra == 'true'
        run: |
          terraform init
          terraform fmt -check -recursive
          terraform validate
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}


  # ------------------------------------------------------------------
  # 2. APPLICATION JOB (Corrected Deployment Logic)
  # ------------------------------------------------------------------
  app_deploy:
    name: 🚀 Build and Deploy App
    runs-on: ubuntu-latest
    environment: production
    
    needs: [infra_apply] 
    if: success() || always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials (for deployment)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (to read outputs)
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
          
      # Retrieve Outputs (Reads from S3 state and sets ENV vars)
      - name: Retrieve Infra Outputs from Remote State
        run: |
          terraform init
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "ECS_TASK_EXECUTION_ROLE_ARN=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG ./app
          docker push $ECR_REGISTRY:$IMAGE_TAG

      # ------------------------------------------------------------------
      # 💥 CRITICAL STEP: Inject Variables, Register TD, and Trigger CodeDeploy CLI
      # ------------------------------------------------------------------
      - name: Register TD and Trigger CodeDeploy
        id: register_and_deploy
        run: |
          # --- 1. PREPARE & REGISTER TASK DEFINITION (Guarantees Valid JSON) ---
          TASK_DEF_FILE="${{ env.TF_WORKING_DIR }}/task-definition-template.json"
          TEMP_TD_FILE="./rendered-task-definition.json"
          
          # Inject Task ARN and Image URI into the TD JSON using jq
          jq --arg arn "${{ env.ECS_TASK_EXECUTION_ROLE_ARN }}" \
             --arg image "${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}" \
             '.executionRoleArn = $arn | .containerDefinitions[0].image = $image' \
             "$TASK_DEF_FILE" > "$TEMP_TD_FILE"

          # Register the new Task Definition to get the clean, validated ARN
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://"$TEMP_TD_FILE" \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "Registered Task Definition: $TASK_DEF_ARN"
          
          # --- 2. PREPARE APPSPEC FOR REVISION (Inject Task ARN) ---
          APPSPEC_PATH="app/appspec.yaml"
          DEPLOY_APPSPEC="./deployment-appspec.yaml"
          
          # Copy AppSpec and inject the dynamic Task ARN and a dummy Listener ARN
          # CodeDeploy requires these placeholders replaced, even though the Deployment Group manages traffic.
          APPSPEC_CONTENT=$(cat "$APPSPEC_PATH")
          
          MODIFIED_APPSPEC_CONTENT=$(echo "$APPSPEC_CONTENT" | \
            sed "s|<TASK_DEFINITION>|$TASK_DEF_ARN|g" | \
            # Inject a placeholder for Listener ARN—CodeDeploy should ignore this, but it satisfies parser requirements
            sed "s|<LISTENER_ARN>|arn:aws:elasticloadbalancing:${{ env.AWS_REGION }}:111111111111:listener/app/alb-name/listener-id|g") 

          echo "$MODIFIED_APPSPEC_CONTENT" > "$DEPLOY_APPSPEC"
          
          # --- 3. TRIGGER CODE DEPLOYMENT (Correct CLI Syntax) ---
          
          # Prepare content string for the --revision parameter (strip newlines/spaces and escape quotes)
          REVISION_CONTENT=$(cat "$DEPLOY_APPSPEC" | tr -d '\n' | sed 's/"/\\"/g' | sed 's/ //g')
          SHA_HASH=$(sha256sum "$DEPLOY_APPSPEC" | cut -d ' ' -f 1)
          
          # Use the 'AppSpecContent' revision type with the injected content
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.PROJECT_NAME }}-codedeploy-app \
            --deployment-group-name ${{ env.PROJECT_NAME }}-dg \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "GitHub Action deployment of Task $TASK_DEF_ARN" \
            --file-exists-behavior OVERWRITE \
            --revision "revisionType=AppSpecContent,appSpecContent={content=$REVISION_CONTENT,sha256=$SHA_HASH}" \
            --query deploymentId --output text)

          echo "CodeDeploy deployment started with ID: $DEPLOYMENT_ID"
          
          # 4. Wait for deployment completion
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID || {
             echo "Deployment failed. Check CodeDeploy console for details."
             exit 1
          }

        working-directory: ${{ github.workspace }}
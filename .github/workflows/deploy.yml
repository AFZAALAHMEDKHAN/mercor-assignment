name: Production ECS Deployment (Split)

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'    # Trigger application deployment
      - 'infra/**'  # Trigger infrastructure update

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  TF_WORKING_DIR: infra

jobs:
  # ------------------------------------------------------------------
  # 1. INFRASTRUCTURE JOB: Provision/Update Platform (Terraform Apply)
  # ------------------------------------------------------------------
  infra_apply:
    name: 🏗️ Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Use paths-filter to check if infra/ folder was modified
      - name: Check for infra changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infra:
              - 'infra/**'
              
      - name: Skip if no infra changes
        if: steps.filter.outputs.infra != 'true'
        run: echo "No changes detected in infra/, skipping terraform apply."
        
    # Terraform Execution (Only runs if infra changes were detected)
      - name: Configure AWS Credentials
        if: steps.filter.outputs.infra == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        if: steps.filter.outputs.infra == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          
      - name: Terraform Init, Format, Plan, and Apply
        if: steps.filter.outputs.infra == 'true'
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          terraform init
          terraform fmt -check -recursive
          terraform validate
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}


  # ------------------------------------------------------------------
  # 2. APPLICATION JOB: Build, Push, Deploy (Always Runs on app/infra change)
  # ------------------------------------------------------------------
  app_deploy:
    name: Build and Deploy App
    runs-on: ubuntu-latest
    environment: production
    
    needs: [infra_apply] 
    if: success() || always() # Runs if infra_apply succeeds or is skipped
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Configure AWS for deployment actions (ECR, ECS, CodeDeploy)
      - name: Configure AWS Credentials (for deployment)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Terraform (to read outputs)
      - name: Setup Terraform (to read outputs)
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          
      # Retrieve Outputs (Reads from S3 state and sets ENV vars)
      - name: Retrieve Infra Outputs from Remote State
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          # init pulls the remote state from S3
          terraform init
          
          # Read outputs and set them as environment variables
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "ECS_TASK_EXECUTION_ROLE_ARN=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      # NEW STEP: Inject the ARN into the template file
      - name: Inject Task Execution Role ARN
        run: |
          # Use sed to replace the placeholder with the actual ARN before rendering
          sed -i "s|<TASK_EXECUTION_ROLE_ARN>|${{ env.ECS_TASK_EXECUTION_ROLE_ARN }}|g" ${{ env.TF_WORKING_DIR }}/task-definition-template.json
          
      # Build, Push, and Deploy
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ env.ECR_REPOSITORY_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG ./app
          docker push $ECR_REGISTRY:$IMAGE_TAG

      # Render the Task Definition with the new image tag
      - name: Render Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # Now the template file contains the correct, injected ARN
          task-definition: infra/task-definition-template.json
          container-name: app-container
          image: ${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}
          
      # Trigger Blue/Green Deployment via CodeDeploy
      - name: Deploy to ECS via CodeDeploy
        uses: aws-actions/amazon-ecs-deploy@v1
        with:
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          codedeploy-app: ${{ env.PROJECT_NAME }}-codedeploy-app
          codedeploy-deployment-group: ${{ env.PROJECT_NAME }}-dg
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          appspec: app/appspec.yaml